{
  "Console Log": {
    "prefix": "cl",
    "body": [
      "console.log(${1})"
    ],
    "scope": "javascript, typescript, typescriptreact, javascriptreact",
    "description": "Console.Log"
  },
  "Console Log with Variable Label": {
    "prefix": "cll",
    "body": [
      "console.log({ ${1:variable} });"
    ],
    "scope": "javascript, typescript, typescriptreact, javascriptreact",
    "description": "Console log with labeled variable using object shorthand"
  },
  "React Functional Component": {
    "prefix": "cfc",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>",
      "      <span>${1:first}</span>",
      "    </div>",
      ");",
      "}"
    ],
    "description": "React Functional Component",
    "scope": "javascript, typescript, typescriptreact, javascriptreact"
  },
  "Create Next.js Page Component": {
    "prefix": "cfcp",
    "body": [
      "",
      "export default function ${TM_DIRECTORY/^.+\\\\(.*)$/${1:/capitalize}/}Page () {",
      "  return (",
      "    <>",
      "      <h1>${TM_DIRECTORY/^.+\\\\(.*)$/${1:/capitalize}/} Page</h1>",
      "    </>",
      "  );",
      "}",
      ""
    ],
    "description": "Create a new Next.js Page component based on folder name",
    "scope": "javascript, typescript, typescriptreact, javascriptreact"
  },
  "className React": {
    "prefix": "cn",
    "body": [
      "className=\"$1\"$0"
    ],
    "description": "className React",
    "scope": "javascript, typescript, typescriptreact, javascriptreact"
  },
  "export default function": {
    "prefix": "exp",
    "body": [
      "export default function ${1:name}() {",
      "\t$0",
      "}"
    ],
    "description": "export default function",
    "scope": "javascript, typescript, typescriptreact, javascriptreact"
  },
  "export default async function": {
    "prefix": "expa",
    "body": [
      "export default async function ${1:name}() {",
      "\t$0",
      "}"
    ],
    "description": "export default function",
    "scope": "javascript,typescript,typescriptreact,javascriptreact"
  },
  "import React Hook": {
    "prefix": "ii",
    "body": [
      "import { ${1|useState, useRef, useEffect, useContext, useReducer, useCallback, useMemo |} } from 'react';"
    ],
    "scope": "javascript, typescript, typescriptreact, javascriptreact",
    "description": "React Hooks Import"
  },
  "React Map Function": {
    "prefix": "rmap",
    "body": [
      "{${1:data}.map((${2:i}) => (",
      "  <div key={${2:i}.id} >",
      "    {${2:i}.id}",
      "  </div>",
      "))}"
    ],
    "description": "Map items in React",
    "scope": "typescriptreact, javascriptreact"
  },
  "Try Catch with Console.log": {
    "prefix": "tryc",
    "body": [
      "try {",
      "  ${1}",
      "} catch (e) {",
      "  console.log(e);",
      "}"
    ],
    "description": "Try-catch block with console.log",
    "scope": "javascript,typescript,typescriptreact,javascriptreact"
  },
  "React SVG Icon Component": {
    "prefix": "svgReact",
    "body": [
      "import { SVGProps } from 'react';",
      "",
      "export default function ${TM_FILENAME_BASE}(props: SVGProps<SVGSVGElement>) {",
      "  return (",
      "    <svg",
      "      xmlns=\"http://www.w3.org/2000/svg\"",
      "      viewBox=\"0 0 24 24\"",
      "      width=\"20\"",
      "      height=\"20\"",
      "      {...props}",
      "    >",
      "      ${0},    </svg>",
      "  );",
      "}"
    ],
    "description": "Create a custom SVG Icon as a React component",
    "scope": "typescript, typescriptreact"
  },
  "Async Fetch API": {
    "prefix": "fetcha",
    "body": [
      "async function ${1:fetchData}() {",
      "  try {",
      "    const res = await fetch(\"${2:url}\");",
      "",
      "    if (!res.ok) {",
      "      throw new Error(\"Network response was not ok\");",
      "    }",
      "",
      "    const data = await res.json();",
      "    console.log({ data });",
      "",
      "    return data;",
      "  } catch (error) {",
      "    console.error({ error });",
      "  }",
      "}"
    ],
    "description": "Fetch API with async/await and error handling",
    "scope": "javascript, typescript, typescriptreact, javascriptreact"
  },
  "Python Try-Except Block": {
    "prefix": "tryexcept",
    "body": [
      "try:",
      "    ${1:pass}",
      "except ${2:Exception} as e:",
      "    print(f\"Error: {e}\")"
    ],
    "description": "Python try-except block",
    "scope": "python"
  }
}